final coveredModules = subprojects.findAll {
    final moduleName = it.name
    final isFeatureModule = moduleName.startsWith("feature_")
    isFeatureModule
}

// Configure all project base on coveredModules
configure(coveredModules) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        version Version.jacoco
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
        group = 'Reporting'
        description = 'Generate Jacoco coverage reports after running tests.'

        reports {
            csv.enabled = true
            xml.enabled = true
            html.enabled = true
        }

        final fileFilter = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                'android/**/*.*',
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class', // covers component implementations
                '**/Dagger*Component$Builder.class', // covers component builders
                '**/*Module_*Factory.class',
                '**/*UseCase_*Factory.class',
                '**/*ViewModel_*Factory.class',
                '**/*PresenterImpl_*Factory.class'
        ]
        final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

// This is apply for build.gradle scope Project
apply plugin: 'jacoco'

jacoco {
    toolVersion Version.jacoco
}

task jacocoGlobalReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        ignoreFailures true
    }

    def projects = coveredModules

    // noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/full')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/full/jacocoFullReport.xml')
        }
    }

    doFirst {
        // noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}
